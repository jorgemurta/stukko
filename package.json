{
  "name": "stukko",
  "version": "1.8.7",
  "description": "Web Framework for Express",
  "main": "./lib/index.js",
  "preferGlobal": "true",
  "bin": {
    "stukko": "./bin/cli.js"
  },
  "directories": {
    "bin": "./bin"
  },
  "dependencies": {
    "bluebird": "^2.3.10",
    "body-parser": "^1.9.2",
    "chance": "^0.5.9",
    "cli-spinner": "^0.1.5",
    "colors": "^0.6.2",
    "compression": "^1.5.2",
    "consolidate": "^0.10.0",
    "cookie-parser": "^1.3.2",
    "cors": "^2.5.0",
    "csurf": "^1.6.2",
    "debug": "^1.0.4",
    "dirty": "^0.9.9",
    "ejs": "^2.4.1",
    "express": "^4.10.1",
    "express-session": "^1.6.1",
    "fs-extra": "^0.12.0",
    "hamljs": "^0.6.2",
    "handlebars": "^4.0.5",
    "hogan": "^1.0.2",
    "i18n": "^0.5.0",
    "jade": "^1.3.1",
    "lodash": "^4.3.0",
    "method-override": "^2.3.0",
    "moment": "^2.7.0",
    "morgan": "^1.4.1",
    "mustache": "^2.2.1",
    "node-cache": "^3.1.0",
    "npm": "^1.5.0-alpha-4",
    "optimist": "^0.6.1",
    "prompt": "^0.2.13",
    "readline": "^1.3.0",
    "serve-favicon": "^2.1.6",
    "stukko-dirty": "^0.0.1",
    "winston": "^0.7.3"
  },
  "devDependencies": {
    "chai": "^1.9.1",
    "gulp-bump": "^0.3.1",
    "gulp-dev": "^0.3.0",
    "gulp-git": "^1.4.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/origin1tech/stukko.git"
  },
  "keywords": [
    "Express",
    "Stukko",
    "Framework",
    "MVC",
    "Sequelize",
    "ORM"
  ],
  "author": {
    "name": "Origin1 Technologies",
    "email": "origin1tech@gmail.com"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/origin1tech/stukko/issues"
  },
  "homepage": "https://github.com/origin1tech/stukko",
  "readme": "#Stukko\r\n\r\n##Pre-Release\r\n\r\nThis is a pre-release. Using in production should be done with caution.\r\n\r\n##Express MVC Web Framework.\r\n\r\nThe following is an overview of the key features in Stukko. Most if not all features have additional configuration \r\nexamples and documentation in their respective application folders. For example to understand how middleware \r\ncan be configured see the /server/middleware/README.md file.\r\n\r\n##Getting Started\r\n\r\n###Installing Stukko:\r\n\r\n```\r\nnpm install -g stukko\r\n```\r\n\r\n###Setting Path:\r\n\r\n**NOTE:** Setting path may not be required. If \"stukko start\" returns \"Cannot find module stukko\" then set the PATH\r\nenvironment variable below per your platform and distribution.\r\n\r\n**Nix Systems** - your path may be slightly different depending on your distro, please verify. (CentOS shown below).\r\n\r\n```\r\nexport NODE_PATH=\"/usr/local/lib/node_modules:$NODE_PATH\"\r\n```\r\n\r\n**Windows 7/8**\r\n```\r\nSET PATH=%PATH%;%AppData%\\npm\\node_modules\r\n```\r\n\r\nIt is best to install Stukko globally as it exposes create methods to create your application which will run on Stukko.\r\nStukko also exposes several methods for managing its apps. Uninstall, install, update, diagnostics, kill(kills node\r\nprocesses for that EADDRINUSE) among others which we'll cover below. if you plan to host your application installing \r\nlocally is just fine.\r\n\r\n###To create an application:\r\n\r\nFrom a command prompt or terminal navigate to the parent directory where you'd like your application to be installed.\r\nStukko will create a sub folder by the name you choose in the create method show below:\r\n\r\n```\r\nstukko create todos\r\n```\r\n\r\n**NOTE** You do note need to run npm install after the application is created. Stukko pragmatically runs npm install\r\nfor you. It is important to also note that if you have additional packages you wish to install at the time of creation\r\nyou can do this as well. Stukko ships with the **dirty** database module only. You'll likely be needing to install\r\nMongoDB, Mongoose, Sequelize or Redis. Or perhaps you want to install connect-redis, connect-mongo or connect-sequelize,\r\nthis can be accomplished in one shot as show here:\r\n\r\n###Create application with additional packages:\r\n\r\n```\r\nstukko create todos --packages sequelize|connect-sequelize\r\n```\r\n\r\n**NOTE** You can separate packages using a pipe or comma.\r\n\r\n##What is Stukko?\r\n\r\nStukko is merely a wrapper for Express and its common dependency modules. Where Stukko is different than other Express\r\nbased frameworks you might have tried is in the way it exposes the expected methods and feel you're used to. Instead\r\nof being opinionated with structure, default modules and so on it attempts to only make wiring up your application \r\nmore simplistic. More succinctly it takes out some of the redundancy of creating a Node/Express application. Stukko is\r\nextremely customizable. Paths and structure can be customized to your liking. Features can be enabled or disabled\r\nrather easily. Middleware is not only added to the Express stack but a mechanism to order the middleware (why this isn't\r\ncommon is all frameworks is a head scratch-er) is available when sequence is critical.\r\n\r\n###Does Stukko have an ORM?\r\n\r\nNot really, again the idea behind Stukko is to wire up an app with the common middleware, get you connected to your\r\ndatabase, hook up your sessions and inject some helpers in your request and response objects. **Why didn't we include\r\nan ORM?** Well, we did at one point, however we found that no matter how complete we made it, there was great difficulty\r\nin exposing all the features of the original driver for each database engine. Not to mention keeping up with updates.\r\nAdditionally most use a database they are familiar with so changing engines is not as common as you might think.\r\nORM's are cool but at the end of the day when it comes time to source a fix for a problem its helpful when the\r\ncode you find is the same code you can use in your project. More on this below but Stukko makes it easy to connect\r\nto your database using Redis, MongoDB, Mongoose, Dirty or Sequelize. So what's the point then? Stukko exposes some\r\nadditional things. It automatically exposes your models via export. It also expose methods to the engine's client, connection,\r\ndisconnect method and connection state. Stukko ensures that your database fires up correctly and shutsdown properly as \r\nwell. Because Stukko exposes the client and connection you have full control to let Stukko create your models based on\r\nyour configuration or create/define them directly. Either way it just works!\r\n\r\n##Paths in Options\r\n\r\nIn your options or your configuration file (they are one in the same for our discussion) several paths are defined. \r\nPaths should be specified as: \r\n\r\n\"/path/to/directory\" \r\n\r\nNote that paths are ALWAYS relative. This is because Stukko will prepend the path with your current working directory. \r\nHandling paths in this manner\r\nensures cross platform comparability. Paths that are stored in an array such as those in your assets are not prepended \r\nwithin Stukko rather Gulp handles\r\nthis process. Hence you'll notice in your default configuration that the paths start with './some/path' or in \r\nthe case of excluding a directory or file '!./some/path'.\r\n\r\nIn some cases you'll notice {{internal}} this means that Stukko using RegExp will match this and prepend with the path \r\nto one of its internal modules. You should not change\r\nthese instances unless you are certain what you are doing. If you are then have it, tell us why if its cool make a pull \r\nrequest so we can include it!\r\n\r\nIn the future (NOT CURRENTLY IMPLEMENTED) we may change this to where all relative paths become something like \r\n'{{cwd}}/some/path' where cwd would be your current working directory e.g where the root of your app is located. \r\nWe mention it only because it might make things more clear however we'll maintain fallback to previous versions.\r\n\r\n##View Engine Support\r\n\r\nStukko uses consolidate, however currently only supports:\r\n\r\n- [haml](https://github.com/creationix/haml-js)\r\n- [hogan](http://twitter.github.io/hogan.js/)\r\n- [ejs](https://github.com/visionmedia/ejs)\r\n- [jade](https://github.com/visionmedia/jade)\r\n\r\n##Session Configuration\r\n\r\nStukko supports 3 main types of session connections, Redis(connect-redis), MongoDB(connect-mongo), and \r\nMySQL, PostgreSQL, SQLite, MariaDB (connect-session-sequelize). Sequelize is a SQL Orm which enables connections to \r\nthe fore mentioned SQL engines.\r\n\r\nIt is important to note that connect-sequelize can use the existing db connection if Sequelize is your defined db.\r\nThis means that you need only specify it as the module to use. Stukko will use your db connection that's already defined.\r\n\r\nFor example if you have:\r\n\r\n```\r\ndb: {\r\n    module: 'sequelize',\r\n    options: {\r\n        // your connection options here.\r\n    }\r\n}\r\n```\r\n\r\nStukko will automatically used this connection. You need only\r\nto specify your config/module with no \"storeOptions\".\r\n\r\n```\r\nsession (under middleware): { \r\n    use: 'express-session', \r\n    options: { \r\n        module: 'connect-sequelize' // only need to specify the connect type. keep in mind \"mongo\" is the connect session\r\n                                    // module name where your db module may be \"mongoose\".\r\n    }\r\n} \r\n```\r\n\r\nConversely if you were to specify a separate connection you would do:\r\n\r\n```\r\nsession: { \r\n    use: 'express-session', \r\n    options: { \r\n        module: 'mongo',\r\n        storeOptions: { // my connection options here } \r\n    } \r\n}\r\n```\r\n\r\nAll connect-session modules support their native settings created by the original developers. Hence you need merely \r\nto set the \"options\" property in the \"session\" property with the options defined in their readme files. \r\nYou can find those below:\r\n\r\n[connect-redis](https://github.com/visionmedia/connect-redis)\r\n[connect-mongo](https://github.com/kcbanner/connect-mongo)\r\n[connect-session-sequelize](https://github.com/mweibel/connect-session-sequelize)\r\n\r\n##Middlware Configuration\r\n\r\nMiddleware can be configured several ways. You can return the middleware from within a constructor thereby ensuring \r\nthe Stukko context will be available, you can create a simple middleware signature much like you'd do in express and \r\nlastly you can create middleware as an object much like Stukko does internaly so as to control the order of the \r\nmiddleware.\r\n\r\n**Basic Middleware**\r\n\r\n```\r\nmodule.exports = function(req, res, next) {\r\n    // do something\r\n    next();\r\n};\r\n```\r\n\r\n**Middlware with Context**\r\n\r\n```\r\nmodule.exports = function(req, res, next) {\r\n    // do something with context\r\n    // this is the host you specified in your development.json file for example.\r\n    var host = this.options.host; \r\n    next();\r\n};\r\n```\r\n\r\n**Advanced Middleware Object**\r\n\r\n```\r\nmodule.exports = {\r\n    enabled: true,\r\n    order: 99, // add me to the end of the middlware stack. NOTE: bodyParser, logger(morgan), csurf, cors and \r\n              // all the default middlware in the core Stukko.js middleware will be first in the order as they must \r\n              // be first in the stack.\r\n    use: function(req, res, next) { // note this could simply be the string name of a module or \r\n                                    // package to require as well cool right? \r\n    }\r\n};\r\n```\r\n\r\n##Assets & Linking\r\n\r\n**Bundling Assets**\r\n\r\nStukko will bundle your assets in the defined folders to be watched. The properties of the assets object within your\r\noptions configuration are explained below. Assets are generally output to /web/public followed by the extension name\r\nof the file. For example mixins that are javascript will be output to /web/public/js.\r\n\r\n+ **clean** when true cleans your public directory before building the application, typically in /web/public.\r\n\r\n+ **watch** when true your /web/assets directory is watched live for changed and will re+process or re+build your\r\n        application when a change is detected. NOTE files that are added or deleted currently do not get built. You'll\r\n        need to manually restart for those instances. Additionally we've decided not to link assets that are newly created. \r\n        You'll need to reload your project manually. There are sound reasons not to do this. We may revisit this in the \r\n        future.\r\n         \r\n+ **link** see below\r\n\r\n+ **mixin** Concatenates all files and files within sub folders to a single file by the name you define in the concat\r\n        property. This is good for common things, utilities and the like that don't need to be in separate directories.\r\n        \r\n+ **minify** This folder when output maintains the defined file structure when output to /web/public/js or /web/public/css\r\n         respectively. NOTE that when in development mode these files will merely be copied to the output location.\r\n         This is because debugging unminified files makes more sense when developing. When you run your project in \r\n         \"production\" mode these files will be automatically minified as you'd expect.\r\n         \r\n+ **preprocess** Processes less and sass files. Only the root files are processessed. All dependency files should be imported\r\n             into your root theme file.\r\n\r\n+ **framework** This defines how to watch/build your client+side frameworks such as AngularJS, Backbone, Ember and the like.\r\n            all files in this directory will be concatenated into a single file by the name you define in the concat\r\n            property.\r\n\r\n\r\n\r\n**Asset Linking**\r\n\r\nAsset linking is one of the more cool features of Stukko. Using Gulp we minify, concat and preprocess your less/sass \r\nfiles automatically. This is invaluable and prevents the need to restart your application over and over as these files\r\nare also watched live.\r\n\r\nYou shouldn't need to modify these settings in your options unless you are changing paths. However one of the key\r\nthings to consider is how it is structured. You have two main configurations. The \"Common\" object and the \"Application\"\r\nobject. Common is as you'd expect, they are files that are more or less dependencies your application needs to run. \r\nThe Application object would be assets that **MUST** be included in your layout file after the common assets.\r\n\r\nYou'll notice in \"layout.html\" that there are sections for styles and javascript that look like:\r\n\r\n```\r\n<!-- inject:common:js-->\r\n<!-- endinject -->\r\n```\r\n\r\nOf course the above only applies if you are using a view engine that uses the .html extension or more specifically uses\r\npure html markup for its rendering. Such as EJS, Hogan and so on. The default engine in Stukko is \r\n[Hogan](http://twitter.github.io/hogan.js/). The very engine created by [Twitter](https://dev.twitter.com/).\r\n\r\nIf you wish to use a view engine that does not use html for its markup such as [Jade](http://jade-lang.com/), your\r\nstart and end tags withing \"common\" or \"application\" would look like the below:\r\n\r\n```\r\n{\r\n      starttag: '// inject:css',\r\n      endtag: '// endinject',\r\n      css: 'link(rel=\"stylesheet\", href=\"{{file}}\")',\r\n      js: 'script(src='/js/app.js')'\r\n}\r\n```\r\n\r\nAn easy way to get the correct syntax for your language is to use a convert. You can find one for just about any lang.\r\nHere are a few where you can copy/past the HTML representation and have it converted to your view engine of choice.\r\n\r\n[Jade Converter](http://html2jade.aaron-powell.com/)\r\n\r\n[Haml Converter](http://html2haml.heroku.com/)\r\n\r\n##Database Support\r\n\r\nCurrently Stukko supports the following database engines:\r\n\r\n- [dirty](https://github.com/felixge/node-dirty)\r\n- [MongoDB](https://github.com/mongodb/node-mongodb-native/)\r\n- [Mongoose](https://github.com/LearnBoost/mongoose)\r\n- [Sequelize](https://github.com/sequelize/sequelize)\r\n- [Redis](https://github.com/mranney/node_redis)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
  "_id": "stukko@1.1.2",
  "_shasum": "b324acb0f03a835a81796b1929a7285d591f5f22",
  "_resolved": "git://github.com/origin1tech/stukko#ee1bbf4fbe4efcb3f8549faf1b546b0f71166e74",
  "_from": "stukko@git://github.com/origin1tech/stukko"
}
